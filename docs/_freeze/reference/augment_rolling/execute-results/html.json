{
  "hash": "a4d4fa7bfdb28870ce8ed29a58ab904e",
  "result": {
    "markdown": "---\ntitle: augment_rolling\n---\n\n\n\n`augment_rolling(data, date_column, value_column, use_independent_variables=False, window=2, window_func='mean', center=False, **kwargs)`\n\nApply one or more rolling functions and window sizes to one or more columns of a DataFrame.\n\n## Parameters\n\n| Name                        | Type                                                            | Description| Default    |\n|-----------------------------|-----------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `data`                      | Union\\[pd.DataFrame, pd.core.groupby.generic.DataFrameGroupBy\\] | The `data` parameter is the input DataFrame or GroupBy object that contains the data to be processed. It can be either a Pandas DataFrame or a GroupBy object| _required_ |\n| `date_column`               | str                                                             | The `date_column` parameter is the name of the datetime column in the DataFrame by which the data should be sorted within each group| _required_ |\n| `value_column`              | Union\\[str, list\\]                                              | The `value_column` parameter is the name of the column(s) in the DataFrame to which the rolling window function(s) should be applied. It can be a single column name or a list of column names| _required_ |\n| `use_independent_variables` | bool                                                            | The `use_independent_variables` parameter is an optional parameter that specifies whether the rolling function(s) require independent variables, such as rolling correlation or rolling regression. (See Examples below.)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | `False`    |\n| `window`                    | Union\\[int, tuple, list\\]                                       | The `window` parameter in the `augment_rolling` function is used to specify the size of the rolling windows. It can be either an integer or a list of integers.   - If it is an integer, the same window size will be applied to all columns specified in the `value_column`.   - If it is a tuple, it will generate windows from the first to the second value (inclusive).  - If it is a list of integers, each integer in the list will be used as the window size for the corresponding column in the `value_column` list.                                                                                                                                                                                      | `2`        |\n| `window_func`               | Union\\[str, list, Tuple\\[str, Callable\\]\\]                      | The `window_func` parameter in the `augment_rolling` function is used to specify the function(s) to be applied to the rolling windows.   1. It can be a string or a list of strings, where each string represents the name of the function to be applied.   2. Alternatively, it can be a list of tuples, where each tuple contains the name of the function to be applied and the function itself. The function is applied as a Pandas Series. (See Examples below.)  3. If the function requires independent variables, the `use_independent_variables` parameter must be specified. The independent variables will be passed to the function as a DataFrame containing the window of rows. (See Examples below.) | `'mean'`   |\n| `center`                    | bool                                                            | The `center` parameter in the `augment_rolling` function determines whether the rolling window is centered or not. If `center` is set to `True`, the rolling window will be centered, meaning that the value at the center of the window will be used as the result. If `                                                                                                                                                                                                                                                                                                                                                                                                                                           | `False`    |\n\n## Returns\n\n| Type         | Description                                                                                                                   |\n|--------------|-------------------------------------------------------------------------------------------------------------------------------|\n| pd.DataFrame | The `augment_rolling` function returns a DataFrame with new columns for each applied function, window size, and value column. |\n\n## Examples\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport timetk as tk\nimport pandas as pd\nimport numpy as np\n\ndf = tk.load_dataset(\"m4_daily\", parse_dates = ['date'])\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# String Function Name and Series Lambda Function (no independent variables)\n# window = [2,7] yields only 2 and 7\nrolled_df = (\n    df\n        .groupby('id')\n        .augment_rolling(\n            date_column = 'date', \n            value_column = 'value', \n            window = [2,7], \n            window_func = ['mean', ('std', lambda x: x.std())]\n        )\n)\nrolled_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_2</th>\n      <th>value_rolling_std_win_2</th>\n      <th>value_rolling_mean_win_7</th>\n      <th>value_rolling_std_win_7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>2076.20</td>\n      <td>NaN</td>\n      <td>2076.200000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2074.80</td>\n      <td>1.979899</td>\n      <td>2074.800000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2061.05</td>\n      <td>17.465537</td>\n      <td>2066.100000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2048.80</td>\n      <td>0.141421</td>\n      <td>2061.800000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2027.65</td>\n      <td>30.052038</td>\n      <td>2050.720000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n      <td>9425.35</td>\n      <td>9.263099</td>\n      <td>9382.071429</td>\n      <td>80.292044</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n      <td>9392.25</td>\n      <td>37.547370</td>\n      <td>9396.400000</td>\n      <td>63.113020</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n      <td>9405.80</td>\n      <td>56.709964</td>\n      <td>9419.114286</td>\n      <td>42.324045</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n      <td>9471.90</td>\n      <td>36.769553</td>\n      <td>9438.928571</td>\n      <td>42.065770</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n      <td>9521.60</td>\n      <td>33.516861</td>\n      <td>9449.028571</td>\n      <td>57.656359</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# String Function Name and Series Lambda Function (no independent variables)\n# window = (1,3) yields 1, 2, and 3\nrolled_df = (\n    df\n        .groupby('id')\n        .augment_rolling(\n            date_column = 'date', \n            value_column = 'value', \n            window = (1,3), \n            window_func = ['mean', ('std', lambda x: x.std())]\n        )\n)\nrolled_df \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_1</th>\n      <th>value_rolling_std_win_1</th>\n      <th>value_rolling_mean_win_2</th>\n      <th>value_rolling_std_win_2</th>\n      <th>value_rolling_mean_win_3</th>\n      <th>value_rolling_std_win_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>2076.20</td>\n      <td>NaN</td>\n      <td>2076.200000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2073.4</td>\n      <td>NaN</td>\n      <td>2074.80</td>\n      <td>1.979899</td>\n      <td>2074.800000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2048.7</td>\n      <td>NaN</td>\n      <td>2061.05</td>\n      <td>17.465537</td>\n      <td>2066.100000</td>\n      <td>15.133737</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2048.9</td>\n      <td>NaN</td>\n      <td>2048.80</td>\n      <td>0.141421</td>\n      <td>2057.000000</td>\n      <td>14.203169</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2006.4</td>\n      <td>NaN</td>\n      <td>2027.65</td>\n      <td>30.052038</td>\n      <td>2034.666667</td>\n      <td>24.479856</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n      <td>9418.8</td>\n      <td>NaN</td>\n      <td>9425.35</td>\n      <td>9.263099</td>\n      <td>9429.466667</td>\n      <td>9.682114</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n      <td>9365.7</td>\n      <td>NaN</td>\n      <td>9392.25</td>\n      <td>37.547370</td>\n      <td>9405.466667</td>\n      <td>35.056288</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n      <td>9445.9</td>\n      <td>NaN</td>\n      <td>9405.80</td>\n      <td>56.709964</td>\n      <td>9410.133333</td>\n      <td>40.796364</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n      <td>9497.9</td>\n      <td>NaN</td>\n      <td>9471.90</td>\n      <td>36.769553</td>\n      <td>9436.500000</td>\n      <td>66.599399</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>9521.60</td>\n      <td>33.516861</td>\n      <td>9496.366667</td>\n      <td>49.717737</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Rolling Correlation: Uses independent variables (value2)\n\ndf = pd.DataFrame({\n    'id': [1, 1, 1, 2, 2, 2],\n    'date': pd.to_datetime(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06']),\n    'value1': [10, 20, 29, 42, 53, 59],\n    'value2': [2, 16, 20, 40, 41, 50],\n})\n\nresult_df = (\n    df.groupby('id')\n    .augment_rolling(\n        date_column='date',\n        value_column='value1',\n        use_independent_variables=True,\n        window=2,\n        window_func=[('corr', lambda df: df['value1'].corr(df['value2']))]\n    )\n)\nresult_df\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value1</th>\n      <th>value2</th>\n      <th>value1_rolling_corr_win_2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2023-01-01</td>\n      <td>10</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2023-01-02</td>\n      <td>20</td>\n      <td>16</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>2023-01-03</td>\n      <td>29</td>\n      <td>20</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2023-01-04</td>\n      <td>42</td>\n      <td>40</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>2023-01-05</td>\n      <td>53</td>\n      <td>41</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>2023-01-06</td>\n      <td>59</td>\n      <td>50</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Rolling Regression: Using independent variables (value2 and value3)\n\n# Requires: scikit-learn\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.DataFrame({\n    'id': [1, 1, 1, 2, 2, 2],\n    'date': pd.to_datetime(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06']),\n    'value1': [10, 20, 29, 42, 53, 59],\n    'value2': [5, 16, 24, 35, 45, 58],\n    'value3': [2, 3, 6, 9, 10, 13]\n})\n\n# Define Regression Function\ndef regression(df):\n\n    model = LinearRegression()\n    X = df[['value2', 'value3']]  # Extract X values (independent variables)\n    y = df['value1']  # Extract y values (dependent variable)\n    model.fit(X, y)\n    ret = pd.Series([model.intercept_, model.coef_[0]], index=['Intercept', 'Slope'])\n    \n    return [ret] # Return a list containing intercept and slope\n    \n\n# Example to call the function\nresult_df = (\n    df.groupby('id')\n    .augment_rolling(\n        date_column='date',\n        value_column='value1',\n        use_independent_variables=True,\n        window=2,\n        window_func=[('regression', regression)]\n    )\n    .dropna()\n)\n\n# Display Results in Wide Format since returning multiple values\nregression_wide_df = pd.concat(result_df['value1_rolling_regression_win_2'].to_list(), axis=1).T\n\nregression_wide_df = pd.concat([result_df.reset_index(drop = True), regression_wide_df], axis=1)\n\nregression_wide_df\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value1</th>\n      <th>value2</th>\n      <th>value3</th>\n      <th>value1_rolling_regression_win_2</th>\n      <th>Intercept</th>\n      <th>Slope</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2023-01-02</td>\n      <td>20</td>\n      <td>16</td>\n      <td>3</td>\n      <td>Intercept    5.327869\nSlope        0.901639\ndt...</td>\n      <td>5.327869</td>\n      <td>0.901639</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2023-01-03</td>\n      <td>29</td>\n      <td>24</td>\n      <td>6</td>\n      <td>Intercept    3.109589\nSlope        0.986301\ndt...</td>\n      <td>3.109589</td>\n      <td>0.986301</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2023-01-05</td>\n      <td>53</td>\n      <td>45</td>\n      <td>10</td>\n      <td>Intercept    2.900990\nSlope        1.089109\ndt...</td>\n      <td>2.900990</td>\n      <td>1.089109</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2023-01-06</td>\n      <td>59</td>\n      <td>58</td>\n      <td>13</td>\n      <td>Intercept    32.269663\nSlope         0.438202\n...</td>\n      <td>32.269663</td>\n      <td>0.438202</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "augment_rolling_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}