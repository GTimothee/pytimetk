{
  "hash": "bacfa71c188e83a0bce8b46d8e3b1ed9",
  "result": {
    "markdown": "---\ntitle: future_frame\n---\n\n\n\n`future_frame(data, date_column, length_out, force_regular=False, bind_data=True)`\n\nExtend a DataFrame or GroupBy object with future dates.\n\nThe `future_frame` function extends a given DataFrame or GroupBy object with future dates based on a specified length, optionally binding the original data.\n\n## Parameters\n\n| Name            | Type                                                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                        | Default    |\n|-----------------|----------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `data`          | pd.DataFrame or pd.core.groupby.generic.DataFrameGroupBy | The `data` parameter is the input DataFrame or DataFrameGroupBy object that you want to extend with future dates.                                                                                                                                                                                                                                                                                                                  | _required_ |\n| `date_column`   | str                                                      | The `date_column` parameter is a string that specifies the name of the column in the DataFrame that contains the dates. This column will be used to generate future dates.                                                                                                                                                                                                                                                         | _required_ |\n| `length_out`    | int                                                      | The `length_out` parameter specifies the number of future dates to be added to the DataFrame.                                                                                                                                                                                                                                                                                                                                      | _required_ |\n| `force_regular` | bool                                                     | The `force_regular` parameter is a boolean flag that determines whether the frequency of the future dates should be forced to be regular. If `force_regular` is set to `True`, the frequency of the future dates will be forced to be regular. If `force_regular` is set to `False`, the frequency of the future dates will be inferred from the input data (e.g. business calendars might be used). The default value is `False`. | `False`    |\n| `bind_data`     | bool                                                     | The `bind_data` parameter is a boolean flag that determines whether the extended data should be concatenated with the original data or returned separately. If `bind_data` is set to `True`, the extended data will be concatenated with the original data using `pd.concat`. If `bind_data` is set to `False`, the extended data will be returned separately. The default value is `True`.                                        | `True`     |\n\n## Returns\n\n| Type         | Description                              |\n|--------------|------------------------------------------|\n| pd.DataFrame | An extended DataFrame with future dates. |\n\n## See Also\n\nmake_future_timeseries: Generate future dates for a time series.\n\n## Examples\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport timetk as tk\n\ndf = tk.load_dataset('m4_hourly', parse_dates = ['date'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>H10</td>\n      <td>2015-07-01 12:00:00+00:00</td>\n      <td>513</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>H10</td>\n      <td>2015-07-01 13:00:00+00:00</td>\n      <td>512</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>H10</td>\n      <td>2015-07-01 14:00:00+00:00</td>\n      <td>506</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>H10</td>\n      <td>2015-07-01 15:00:00+00:00</td>\n      <td>500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>H10</td>\n      <td>2015-07-01 16:00:00+00:00</td>\n      <td>490</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3055</th>\n      <td>H410</td>\n      <td>2017-02-10 07:00:00+00:00</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>3056</th>\n      <td>H410</td>\n      <td>2017-02-10 08:00:00+00:00</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>3057</th>\n      <td>H410</td>\n      <td>2017-02-10 09:00:00+00:00</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>3058</th>\n      <td>H410</td>\n      <td>2017-02-10 10:00:00+00:00</td>\n      <td>79</td>\n    </tr>\n    <tr>\n      <th>3059</th>\n      <td>H410</td>\n      <td>2017-02-10 11:00:00+00:00</td>\n      <td>77</td>\n    </tr>\n  </tbody>\n</table>\n<p>3060 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Extend the data for a single time series group by 12 hours\nextended_df = (\n    df\n        .query('id == \"H10\"')\n        .future_frame(\n            date_column = 'date', \n            length_out  = 12\n        )\n        .assign(id = lambda x: x['id'].ffill())\n)\nextended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>H10</td>\n      <td>2015-07-01 12:00:00+00:00</td>\n      <td>513.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>H10</td>\n      <td>2015-07-01 13:00:00+00:00</td>\n      <td>512.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>H10</td>\n      <td>2015-07-01 14:00:00+00:00</td>\n      <td>506.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>H10</td>\n      <td>2015-07-01 15:00:00+00:00</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>H10</td>\n      <td>2015-07-01 16:00:00+00:00</td>\n      <td>490.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>707</th>\n      <td>H10</td>\n      <td>2015-07-30 23:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>708</th>\n      <td>H10</td>\n      <td>2015-07-31 00:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>709</th>\n      <td>H10</td>\n      <td>2015-07-31 01:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>710</th>\n      <td>H10</td>\n      <td>2015-07-31 02:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>711</th>\n      <td>H10</td>\n      <td>2015-07-31 03:00:00</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>712 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Extend the data for each group by 12 hours\nextended_df = (\n    df\n        .groupby('id')\n        .future_frame(\n            date_column = 'date', \n            length_out  = 12\n        )\n)    \nextended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>H10</td>\n      <td>2015-07-01 12:00:00+00:00</td>\n      <td>513.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>H10</td>\n      <td>2015-07-01 13:00:00+00:00</td>\n      <td>512.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>H10</td>\n      <td>2015-07-01 14:00:00+00:00</td>\n      <td>506.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>H10</td>\n      <td>2015-07-01 15:00:00+00:00</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>H10</td>\n      <td>2015-07-01 16:00:00+00:00</td>\n      <td>490.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>707</th>\n      <td>H50</td>\n      <td>2015-07-30 23:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>708</th>\n      <td>H50</td>\n      <td>2015-07-31 00:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>709</th>\n      <td>H50</td>\n      <td>2015-07-31 01:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>710</th>\n      <td>H50</td>\n      <td>2015-07-31 02:00:00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>711</th>\n      <td>H50</td>\n      <td>2015-07-31 03:00:00</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>3108 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Same as above, but just return the extended data with bind_data=False\nextended_df = (\n    df\n        .groupby('id')\n        .future_frame(\n            date_column = 'date', \n            length_out  = 12,\n            bind_data   = False # Returns just future data\n        )\n)    \nextended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2015-07-30 16:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2015-07-30 17:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2015-07-30 18:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2015-07-30 19:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015-07-30 20:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2015-07-30 21:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2015-07-30 22:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2015-07-30 23:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2015-07-31 00:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2015-07-31 01:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2015-07-31 02:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2015-07-31 03:00:00</td>\n      <td>H10</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2013-09-30 16:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2013-09-30 17:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013-09-30 18:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013-09-30 19:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2013-09-30 20:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2013-09-30 21:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2013-09-30 22:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2013-09-30 23:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2013-10-01 00:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2013-10-01 01:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2013-10-01 02:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2013-10-01 03:00:00</td>\n      <td>H150</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2017-02-10 12:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2017-02-10 13:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2017-02-10 14:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2017-02-10 15:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2017-02-10 16:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2017-02-10 17:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2017-02-10 18:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2017-02-10 19:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2017-02-10 20:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2017-02-10 21:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2017-02-10 22:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2017-02-10 23:00:00</td>\n      <td>H410</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2015-07-30 16:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2015-07-30 17:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2015-07-30 18:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2015-07-30 19:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015-07-30 20:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2015-07-30 21:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2015-07-30 22:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2015-07-30 23:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2015-07-31 00:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2015-07-31 01:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2015-07-31 02:00:00</td>\n      <td>H50</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2015-07-31 03:00:00</td>\n      <td>H50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n # Working with irregular dates: Business Days (Stocks Data)\ndf = tk.load_dataset('stocks_daily', parse_dates = ['date'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>META</td>\n      <td>2013-01-02</td>\n      <td>27.440001</td>\n      <td>28.180000</td>\n      <td>27.420000</td>\n      <td>28.000000</td>\n      <td>69846400</td>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>META</td>\n      <td>2013-01-03</td>\n      <td>27.879999</td>\n      <td>28.469999</td>\n      <td>27.590000</td>\n      <td>27.770000</td>\n      <td>63140600</td>\n      <td>27.770000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>META</td>\n      <td>2013-01-04</td>\n      <td>28.010000</td>\n      <td>28.930000</td>\n      <td>27.830000</td>\n      <td>28.760000</td>\n      <td>72715400</td>\n      <td>28.760000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>META</td>\n      <td>2013-01-07</td>\n      <td>28.690001</td>\n      <td>29.790001</td>\n      <td>28.650000</td>\n      <td>29.420000</td>\n      <td>83781800</td>\n      <td>29.420000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>META</td>\n      <td>2013-01-08</td>\n      <td>29.510000</td>\n      <td>29.600000</td>\n      <td>28.860001</td>\n      <td>29.059999</td>\n      <td>45871300</td>\n      <td>29.059999</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16189</th>\n      <td>GOOG</td>\n      <td>2023-09-15</td>\n      <td>138.800003</td>\n      <td>139.360001</td>\n      <td>137.179993</td>\n      <td>138.300003</td>\n      <td>48947600</td>\n      <td>138.300003</td>\n    </tr>\n    <tr>\n      <th>16190</th>\n      <td>GOOG</td>\n      <td>2023-09-18</td>\n      <td>137.630005</td>\n      <td>139.929993</td>\n      <td>137.630005</td>\n      <td>138.960007</td>\n      <td>16233600</td>\n      <td>138.960007</td>\n    </tr>\n    <tr>\n      <th>16191</th>\n      <td>GOOG</td>\n      <td>2023-09-19</td>\n      <td>138.250000</td>\n      <td>139.175003</td>\n      <td>137.500000</td>\n      <td>138.830002</td>\n      <td>15479100</td>\n      <td>138.830002</td>\n    </tr>\n    <tr>\n      <th>16192</th>\n      <td>GOOG</td>\n      <td>2023-09-20</td>\n      <td>138.830002</td>\n      <td>138.839996</td>\n      <td>134.520004</td>\n      <td>134.589996</td>\n      <td>21473500</td>\n      <td>134.589996</td>\n    </tr>\n    <tr>\n      <th>16193</th>\n      <td>GOOG</td>\n      <td>2023-09-21</td>\n      <td>132.389999</td>\n      <td>133.190002</td>\n      <td>131.089996</td>\n      <td>131.360001</td>\n      <td>22042700</td>\n      <td>131.360001</td>\n    </tr>\n  </tbody>\n</table>\n<p>16194 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Allow irregular future dates (i.e. business days)\nextended_df = (\n    df\n        .groupby('symbol')\n        .future_frame(\n            date_column = 'date', \n            length_out  = 12,\n            force_regular = False, # Allow irregular future dates (i.e. business days)),\n            bind_data   = False\n        )\n)    \nextended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>symbol</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-22</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-25</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-26</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-27</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-28</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2023-10-03</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2023-10-04</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2023-10-05</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2023-10-06</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2023-10-09</td>\n      <td>NVDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>72 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Force regular: Include Weekends\nextended_df = (\n    df\n        .groupby('symbol')\n        .future_frame(\n            date_column = 'date', \n            length_out  = 12,\n            force_regular = True, # Force regular future dates (i.e. include weekends)),\n            bind_data   = False\n        )\n)    \nextended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>symbol</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-22</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-23</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-24</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-25</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-26</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2023-09-29</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2023-09-30</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2023-10-01</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2023-10-02</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2023-10-03</td>\n      <td>NVDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>72 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "future_frame_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}