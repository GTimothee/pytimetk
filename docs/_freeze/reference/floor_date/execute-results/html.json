{
  "hash": "4292ad63be2cb3e739a0f6bad0273f38",
  "result": {
    "markdown": "---\ntitle: floor_date\n---\n\n\n\n`floor_date(idx, unit='D')`\n\nRobust date flooring.\n\nThe `floor_date` function takes a pandas Series of dates and returns a new Series with the dates rounded down to the specified unit. It's more robust than the pandas `floor` function, which does weird things with irregular frequencies like Month which are actually regular.\n\n## Parameters\n\n| Name   | Type                          | Description                                                                                                                                                                                                                                                            | Default    |\n|--------|-------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `idx`  | pd.Series or pd.DatetimeIndex | The `idx` parameter is a pandas Series or pandas DatetimeIndex object that contains datetime values. It represents the dates that you want to round down.                                                                                                              | _required_ |\n| `unit` | str                           | The `unit` parameter in the `floor_date` function is a string that specifies the time unit to which the dates in the `idx` series should be rounded down. It has a default value of \"D\", which stands for day. Other possible values for the `unit` parameter could be | `'D'`      |\n\n## Returns\n\n| Type      | Description                                                                                |\n|-----------|--------------------------------------------------------------------------------------------|\n| pd.Series | The `floor_date` function returns a pandas Series object containing datetime64[ns] values. |\n\n## Examples\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pytimetk as tk\nimport pandas as pd\n\ndates = pd.date_range(\"2020-01-01\", \"2020-01-10\", freq=\"1H\")\ndates\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nDatetimeIndex(['2020-01-01 00:00:00', '2020-01-01 01:00:00',\n               '2020-01-01 02:00:00', '2020-01-01 03:00:00',\n               '2020-01-01 04:00:00', '2020-01-01 05:00:00',\n               '2020-01-01 06:00:00', '2020-01-01 07:00:00',\n               '2020-01-01 08:00:00', '2020-01-01 09:00:00',\n               ...\n               '2020-01-09 15:00:00', '2020-01-09 16:00:00',\n               '2020-01-09 17:00:00', '2020-01-09 18:00:00',\n               '2020-01-09 19:00:00', '2020-01-09 20:00:00',\n               '2020-01-09 21:00:00', '2020-01-09 22:00:00',\n               '2020-01-09 23:00:00', '2020-01-10 00:00:00'],\n              dtype='datetime64[ns]', length=217, freq='H')\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Pandas fails to floor Month\n# dates.floor(\"M\") # ValueError: <MonthEnd> is a non-fixed frequency\n\n# floor_date works as expected\ntk.floor_date(dates, unit=\"M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0     2020-01-01\n1     2020-01-01\n2     2020-01-01\n3     2020-01-01\n4     2020-01-01\n         ...    \n212   2020-01-01\n213   2020-01-01\n214   2020-01-01\n215   2020-01-01\n216   2020-01-01\nName: idx, Length: 217, dtype: datetime64[ns]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "floor_date_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}