# summarize_by_time { #timetk.summarize_by_time }

`summarize_by_time`



## Functions

| Name | Description |
| --- | --- |
| [summarize_by_time](#timetk.summarize_by_time.summarize_by_time) | The `summarize_by_time` function aggregates data by a specified time period and one or more numeric columns, allowing for grouping and customization of the aggregation. |

### summarize_by_time { #timetk.summarize_by_time.summarize_by_time }

`summarize_by_time.summarize_by_time(data, date_column, value_column, groups=None, rule='D', agg_func='sum', kind='timestamp', wide_format=False, fillna=0, flatten_column_names=True, reset_index=True, *args, **kwargs)`

The `summarize_by_time` function aggregates data by a specified time period and one or more numeric columns, allowing for grouping and customization of the aggregation.

#### Parameters

| Name                   | Type                                                     | Description                                                                                                                                                                                                                                                                                                                                                                                | Default       |
|------------------------|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|
| `data`                 | pd.DataFrame or pd.core.groupby.generic.DataFrameGroupBy | A pandas DataFrame or a pandas GroupBy object. This is the data that you want to summarize by time.                                                                                                                                                                                                                                                                                        | _required_    |
| `date_column`          | str                                                      | The name of the column in the data frame that contains the dates or timestamps to be aggregated by. This column must be of type datetime64.                                                                                                                                                                                                                                                | _required_    |
| `value_column`         | str or list                                              | The `value_column` parameter is the name of one or more columns in the DataFrame that you want to aggregate by. It can be either a string representing a single column name, or a list of strings representing multiple column names.                                                                                                                                                      | _required_    |
| `groups`               | str or list or None                                      | The `groups` parameter is an optional parameter that allows you to specify one or more column names representing groups to aggregate by. If you want to aggregate the data by specific groups, you can pass the column names as a string or a list to the `groups` parameter. If you want to aggregate the data without grouping, you can set `groups` to None. The default value is None. | `None`        |
| `rule`                 | str                                                      | The `rule` parameter specifies the frequency at which the data should be aggregated. It accepts a string representing a pandas frequency offset, such as "D" for daily or "MS" for month start. The default value is "D", which means the data will be aggregated on a daily basis.                                                                                                        | `'D'`         |
| `agg_func`             | list                                                     | The `agg_func` parameter is used to specify one or more aggregating functions to apply to the value column(s) during the summarization process. It can be a single function or a list of functions. The default value is `"sum"`, which represents the sum function.                                                                                                                       | `'sum'`       |
| `kind`                 | str                                                      | The `kind` parameter specifies whether the time series data is represented as a "timestamp" or a "period". If `kind` is set to "timestamp", the data is treated as a continuous time series with specific timestamps. If `kind` is set to "period", the data is treated as a discrete time series with specific periods. The default value is "timestamp".                                 | `'timestamp'` |
| `wide_format`          | bool                                                     | A boolean parameter that determines whether the output should be in "wide" or "long" format. If set to `True`, the output will be in wide format, where each group is represented by a separate column. If set to False, the output will be in long format, where each group is represented by a separate row. The default value is `False`.                                               | `False`       |
| `fillna`               | int                                                      | The `fillna` parameter is used to specify the value to fill missing data with. By default, it is set to 0. If you want to keep missing values as NaN, you can use `np.nan` as the value for `fillna`.                                                                                                                                                                                      | `0`           |
| `flatten_column_names` | bool                                                     | A boolean parameter that determines whether or not to flatten the multiindex column names. If set to `True`, the multiindex column names will be flattened. If set to `False`, the multiindex column names will be preserved. The default value is `True`.                                                                                                                                 | `True`        |
| `reset_index`          | bool                                                     | A boolean parameter that determines whether or not to reset the index of the resulting DataFrame. If set to True, the index will be reset to the default integer index. If set to False, the index will not be reset. The default value is True.                                                                                                                                           | `True`        |

#### Returns

| Type                                           | Description   |
|------------------------------------------------|---------------|
| a Pandas DataFrame that is summarized by time. |               |

#### Examples

```{python}
import timetk as tk
import pandas as pd

df = tk.load_dataset('bike_sales_sample', parse_dates = ['order_date'])

df
```

```{python}
# Summarize by time with a DataFrame object
( 
    df 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = 'total_price',
            groups       = "category_2",
            rule         = "MS",
            agg_func     = ['mean', 'sum']
        )
)
```

```{python}
# Summarize by time with a GroupBy object
(
    df 
        .groupby('category_1') 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = 'total_price', 
            rule         = 'MS',
            wide_format  = True, 
        )
)
```