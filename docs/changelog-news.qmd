---
title: "Changelog for PyTimeTK"
jupyter: python3
toc: true
toc-depth: 3
number-sections: true
number-depth: 2
---

# pytimetk 0.1.0.9000 (in development)

### Anomaly Detection

- `anomalize()`: A new scalable function for detecting time series anomalies (outliers) 

### New Functions:

- `apply_by_time()`: For complex apply-style aggregations by time. 
- `augment_rolling_apply()`: For complex rolling operations using apply-style data frame functions.  
- `augment_expanding()`: For expanding calculations with single-column functions (e.g. mean). 
- `augment_expanding_apply()`: For complex expanding operations with apply-style data frame functions.
- `get_frequency()`: Infer a pandas-like frequency. More robust than `pandas.infer_freq`.
- `get_seasonal_frequency()`: Infer the pandas-like seasonal frequency (periodicity) for the time series. 
- `get_trend_frequency()`: Infer the pandas-like trend for the time series. 

### New Finance Module

- `augment_ewm()`: Exponentially weighted augmentation

### Speed Improvements

#### Polars Engines:

- `summarize_by_time()`: Gains a polars engine. 
  - 3X to 10X speed improvements. 
- `augment_lags()` and `augment_leads()`: Gains a polars engine. Speed improvements increase with number of lags/leads. 
  - 6.5X speed improvement with 100 lags. 
- `augment_expanding()`: Gains a polars engine. 

#### Parallel Processing and Vectorized Optimizations:

- `pad_by_time()`: Complete overhaul. Uses Cartesian Product (Vectorization) to enhance the speed. 1000s of time series can now be padded in seconds.
  - **Independent review: Time went from over 90 minutes to 13 seconds for a 500X speedup on 10M rows.** 
- `future_frame()`: Complete overhaul. Uses vectorization when possible. Grouped parallel processing. Set `threads = -1` to use all cores. 
  - **Independent Review: Time went from 11 minutes to 2.5 minutes for a 4.4X speedup on 10M rows**
- `ts_features`: Uses concurrent futures to parallelize tasks. Set `threads = -1` to use all cores.
- `ts_summary`: Uses concurrent futures to parallelize tasks. Set `threads = -1` to use all cores.
- `anomalize`: Uses concurrent futures to parallelize tasks. Set `threads = -1` to use all cores.
- `augment_rolling()` and `augment_rolling_apply()`: Uses concurrent futures to parallelize tasks. Set `threads = -1` to use all cores.

### Helpful Utilities:

- `parallel_apply`: Mimics the `pandas apply()` function with concurrent futures.
- `progress_apply`: Adds a progress bar to pandas apply()
- `glimpse()`: Mimics tidyverse (tibble) glimpse function

### New Data Sets:

- `expedia`: Expedia hotel searches time series data set

### 3 New Applied Tutorials:

1. [Sales Analysis Tutorial](/tutorials/01_sales_crm.html)
2. [Finance Analysis Tutorial](/tutorials/02_finance.html)
3. [Demand Forecasting Tutorial](/tutorials/03_demand_forecasting.html)

### Final Deprecations:

- `summarize_by_time()`: `kind = "period"`. This was removed for consistency with `pytimetk`. "timestamp" is the default. 
- `augment_rolling()`: `use_independent_variables`. This is replaced by `augment_rolling_apply()`.

# pytimetk 0.1.0 (2023-10-02)

### About the Initial release. 

This release includes the following features:

1. A workhorse plotting function called `plot_timeseries()` üí™
2. Three (3) data wrangling functions that will simplify 90% of time series tasks üôè
3. Five (5) "augmentor" functions: These add hundreds of features to time series to help in predictive tasks üß†
4. Two (2) time series feature summarizes: identify key aspects of your time series üîç
5. Nine (9) pandas series and DatetimeIndex helpers (work more easily with these timestamp data structures) ‚è≤
6. Four (4) date utility functions that fill in missing function gaps in pandas üêº
7. Two (2) Visualization utilities to help you customize your visualizations and make them look MORE professional üìà
8. Two (2) Pandas helpers that help clean up and understand pandas data frames with time series üéá
9. Twelve (12) time series datasets that you can practice PyTimeTK time series analysis on üî¢

### The PyTimeTK website comes with:

1. Two (2) Getting started tutorials
2. Five (5) Guides covering common tasks
3. Coming Soon: Applied Tutorials in Sales, Finance, Demand Forecasting, Anomaly Detection, and more.
