---
title: "Quick Start"
jupyter: python3
---

::: {.callout-warning collapse="false"}
## Under Development

This library is currently under development and is not intended for general usage yet. Functionality is experimental until release 0.1.0. 
:::

## Quick Start: A Monthly Sales Analysis

This is a simple exercise to showcase the power of [`summarize_by_time()`](/reference/summarize_by_time.html):

### Import Libraries & Data

First, `import timetk as tk`. This gets you access to the most important functions. Use `tk.load_dataset()` to load the "bike_sales_sample" dataset.

::: {.callout-note collapse="false"}
## About the Bike Sales Sample Dataset

This dataset contains "orderlines" for orders recieved. The `order_date` column contains timestamps. We can use this column to peform sales aggregations (e.g. total revenue).
:::

```{python}
import timetk as tk
import pandas as pd

df = tk.load_dataset('bike_sales_sample')
df['order_date'] = pd.to_datetime(df['order_date'])

df   
```

### Using `summarize_by_time()` for a Sales Analysis

Your company might be interested in sales patterns for various categories of bicycles. We can obtain a grouped monthly sales aggregation by `category_1` in two lines of code:

1. First use pandas's `groupby()` method to group the DataFrame on `category_1`
2. Next, use timetk's `summarize_by_time()` method to apply the sum function my month start ("MS") and use `wide_format` to return the dataframe in wide format. 

The result is the total revenue for Mountain and Road bikes by month. 
```{python}
summary_category_1_df = df \
    .groupby("category_1") \
    .summarize_by_time(
        date_column  = 'order_date', 
        value_column = 'total_price',
        freq         = "MS",
        agg_func     = 'sum',
        wide_format  = True
    )

summary_category_1_df
```



### Visualizing Sales Patterns

::: {.callout-note collapse="false"}
## Coming soon: `plot_timeseries()`.

We are working on an even easier and more attractive plotting solution specifically designed for Time Series Analysis. It's coming soon. 
:::

We can visualize with `plotly`. 

```{python}
#| warning: false
import plotly.express as px

px.line(
    summary_category_1_df, 
    x = 'order_date', 
    y = ['total_price_Mountain', 'total_price_Road'],
    template = "plotly_dark",    
    title = "Monthly Sales of Mountain and Road Bicycles",
    width = 900
)
```

## More coming soon...

There's a lot more coming in `timetk` for Python. You can check out our [Project Roadmap here](https://github.com/business-science/pytimetk/issues/2). 
