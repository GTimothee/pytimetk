{
  "hash": "5942d79f0504e7b3389e09644c7412bd",
  "result": {
    "markdown": "---\ntitle: Adding Features (Augmenting)\ntoc: true\ntoc-depth: 3\nnumber-sections: true\nnumber-depth: 2\n---\n\nThis section will cover the `augment` set of functions, use to add many additional time series features to a dataset. We'll cover how to use the following set of functions\n\n* `augment_lags()`\n* `augment_leads()`\n* `augment_rolling()`\n* `augment_time_series_signature()`\n* `augment_holiday_signature()`\n* `augment_fourier()`\n\n# Augment Lags / Leads\n**Lags** are commonly used in time series forecasting to incorportate the past values of a feature as predictors. **Leads**, while not as common as Lags in time series might be useful in scenarios where you want to predict a future value based on other future values.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `augment_lag()`, `augment_leads()`\n\nUse `help(tk.augment_lags)` and `help(tk.augment_leads)` to review additional helpful documentation.\n\n:::\n\n## Basic Examples\n\nAdd 1 or more lags / leads to a dataset:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import libraries\nimport pytimetk as tk\nimport pandas as pd\nimport numpy as np\nimport random\n\n# create sample data\ndates = pd.date_range(start = '2023-09-18', end = '2023-09-24')\nvalues = [random.randint(10, 50) for _ in range(7)]\n\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCreate lag / lead of 3 days:\n\n:::{.panel-tabset groups=\"augment-leads-lags\"}\n## Lag\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# augment lag\ndf \\\n    .augment_lags(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tlags         = 3\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lag_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>45.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Lead\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# augment leads\ndf \\\n    .augment_leads(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tleads        = 3\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lead_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>45.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>43.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nWe can create multiple lag / lead values for a single time series:\n\n:::{.panel-tabset groups=\"augment-leads-lags-multiple\"}\n## Lag\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# multiple lagged values for a single time series\ndf \\\n\t.augment_lags(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tlags         = (1, 3)\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lag_1</th>\n      <th>value_lag_2</th>\n      <th>value_lag_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>12.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>15.0</td>\n      <td>12.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>21.0</td>\n      <td>15.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>45.0</td>\n      <td>21.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>21.0</td>\n      <td>45.0</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>20.0</td>\n      <td>21.0</td>\n      <td>45.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Lead\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# multiple leads values for a single time series\ndf \\\n\t.augment_leads(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tleads        = (1, 3)\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lead_1</th>\n      <th>value_lead_2</th>\n      <th>value_lead_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>15.0</td>\n      <td>21.0</td>\n      <td>45.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>21.0</td>\n      <td>45.0</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>45.0</td>\n      <td>21.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>21.0</td>\n      <td>20.0</td>\n      <td>43.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>20.0</td>\n      <td>43.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>43.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n## Augment Lags / Leads For Grouped Time Series\n\n`augment_lags()` and `augment_leads()` also works for grouped time series data. Lets use the `m4_daily_df` dataset to showcase examples:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# load m4_daily_df\nm4_daily_df = tk.load_dataset('m4_daily', parse_dates = ['date'])\n```\n:::\n\n\n:::{.panel-tabset groups=\"augment-leads-lags-group\"}\n## Lag\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# agument lags for grouped time series\nm4_daily_df \\\n\t.groupby(\"id\") \\\n    .augment_lags(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tlags         = (1, 7)\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lag_1</th>\n      <th>value_lag_2</th>\n      <th>value_lag_3</th>\n      <th>value_lag_4</th>\n      <th>value_lag_5</th>\n      <th>value_lag_6</th>\n      <th>value_lag_7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2073.4</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2048.7</td>\n      <td>2073.4</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2048.9</td>\n      <td>2048.7</td>\n      <td>2073.4</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n      <td>9431.9</td>\n      <td>9437.7</td>\n      <td>9474.6</td>\n      <td>9359.2</td>\n      <td>9286.9</td>\n      <td>9265.4</td>\n      <td>9091.4</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n      <td>9418.8</td>\n      <td>9431.9</td>\n      <td>9437.7</td>\n      <td>9474.6</td>\n      <td>9359.2</td>\n      <td>9286.9</td>\n      <td>9265.4</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n      <td>9365.7</td>\n      <td>9418.8</td>\n      <td>9431.9</td>\n      <td>9437.7</td>\n      <td>9474.6</td>\n      <td>9359.2</td>\n      <td>9286.9</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n      <td>9445.9</td>\n      <td>9365.7</td>\n      <td>9418.8</td>\n      <td>9431.9</td>\n      <td>9437.7</td>\n      <td>9474.6</td>\n      <td>9359.2</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n      <td>9497.9</td>\n      <td>9445.9</td>\n      <td>9365.7</td>\n      <td>9418.8</td>\n      <td>9431.9</td>\n      <td>9437.7</td>\n      <td>9474.6</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Lead\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# augment leads for grouped time series\nm4_daily_df \\\n\t.groupby(\"id\") \\\n    .augment_leads(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tleads        = (1, 7)\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_lead_1</th>\n      <th>value_lead_2</th>\n      <th>value_lead_3</th>\n      <th>value_lead_4</th>\n      <th>value_lead_5</th>\n      <th>value_lead_6</th>\n      <th>value_lead_7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>2073.4</td>\n      <td>2048.7</td>\n      <td>2048.9</td>\n      <td>2006.4</td>\n      <td>2017.6</td>\n      <td>2019.1</td>\n      <td>2007.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2048.7</td>\n      <td>2048.9</td>\n      <td>2006.4</td>\n      <td>2017.6</td>\n      <td>2019.1</td>\n      <td>2007.4</td>\n      <td>2010.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2048.9</td>\n      <td>2006.4</td>\n      <td>2017.6</td>\n      <td>2019.1</td>\n      <td>2007.4</td>\n      <td>2010.0</td>\n      <td>2001.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2006.4</td>\n      <td>2017.6</td>\n      <td>2019.1</td>\n      <td>2007.4</td>\n      <td>2010.0</td>\n      <td>2001.5</td>\n      <td>1978.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2017.6</td>\n      <td>2019.1</td>\n      <td>2007.4</td>\n      <td>2010.0</td>\n      <td>2001.5</td>\n      <td>1978.8</td>\n      <td>1988.3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n      <td>9365.7</td>\n      <td>9445.9</td>\n      <td>9497.9</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n      <td>9445.9</td>\n      <td>9497.9</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n      <td>9497.9</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n# Augment Rolling\n\nA **Rolling Window** refers to a specific-sized subset of time series data that moves sequentially over the dataset.\n\nRolling windows play a crucial role in time series forecasting due to their ability to smooth out data, highlight seasonality, and detect anomalies.\n\n`augment_rolling()` applies multiple rolling window functions with varying window sizes to time series data.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `augment_rolling()`\n\nUse `help(tk.augment_rolling)` to review additional helpful documentation.\n\n:::\n\n\n## Basic Examples\n\nWe'll continue with the use of our sample `df` created earlier:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# window = 3 days, window function = mean\ndf \\\n\t.augment_rolling(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\twindow       = 3,\n\t\twindow_func  = 'mean'\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>28.666667</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>28.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt is important to understand how the `center` parameter in `augment_rolling()` works.\n\n::: {.callout-important collapse=\"false\"}\n## `center`\n\nWhen set to `True` (default) the value of the rolling window will be **centered**, meaning that the value at the center of the window will be used as the result.\nWhen set to `False` (default) the rolling window will **not be centered**, meaning that the value at the end of the window will be used as the result.\n\n:::\n\nLets see an example:\n\n:::{.panel-tabset groups=\"augment-rolling\"}\n\n## Augment Rolling: Center = True\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# agument rolling: center = true\ndf \\\n\t.augment_rolling(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\twindow       = 3,\n\t\twindow_func  = 'mean',\n\t\tcenter       = True\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>28.666667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that we are using a 3 day rolling window and applying a `mean` to `value`. In simplier terms, `value_rolling_mean_win_3` is a 3 day rolling average of `value` with `center` set to `True`. Thus the function starts computing the `mean` from `2023-09-19`\n\n## Augment Rolling: Center = False\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# agument rolling: center = false\ndf \\\n\t.augment_rolling(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\twindow       = 3,\n\t\twindow_func  = 'mean',\n\t\tcenter       = True\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-09-18</td>\n      <td>12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-09-19</td>\n      <td>15</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-09-20</td>\n      <td>21</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-09-21</td>\n      <td>45</td>\n      <td>29.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-09-22</td>\n      <td>21</td>\n      <td>28.666667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2023-09-23</td>\n      <td>20</td>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2023-09-24</td>\n      <td>43</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that we are using a 3 day rolling window and applying a `mean` to `value`. In simplier terms, `value_rolling_mean_win_3` is a 3 day rolling average of `value` with `center` set to `False`. Thus the function starts computing the `mean` from `2023-09-20`. The same `value` for `2023-19-18` and `2023-09-19` are returned as `value_rolling_mean_win_3` since it did not detected the third to apply the 3 day rolling average.\n\n:::\n\n\n## Augment Rolling with Multiple Windows and Window Functions\n\nMultiple window functions can be passed to the `window` and `window_func` parameters:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# augment rolling: window of 2 & 7 days, window_func of mean and standard deviation\nm4_daily_df \\\n\t.query('id == \"D10\"') \\\n    .augment_rolling(\n                date_column = 'date',\n                value_column = 'value',\n                window = [2,7],\n                window_func = ['mean', ('std', lambda x: x.std())]\n            )\n\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_2</th>\n      <th>value_rolling_std_win_2</th>\n      <th>value_rolling_mean_win_7</th>\n      <th>value_rolling_std_win_7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2074.80</td>\n      <td>1.40</td>\n      <td>2074.800000</td>\n      <td>1.400000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2061.05</td>\n      <td>12.35</td>\n      <td>2066.100000</td>\n      <td>12.356645</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2048.80</td>\n      <td>0.10</td>\n      <td>2061.800000</td>\n      <td>13.037830</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2027.65</td>\n      <td>21.25</td>\n      <td>2050.720000</td>\n      <td>25.041038</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>669</th>\n      <td>D10</td>\n      <td>2016-05-02</td>\n      <td>2630.7</td>\n      <td>2615.85</td>\n      <td>14.85</td>\n      <td>2579.471429</td>\n      <td>28.868159</td>\n    </tr>\n    <tr>\n      <th>670</th>\n      <td>D10</td>\n      <td>2016-05-03</td>\n      <td>2649.3</td>\n      <td>2640.00</td>\n      <td>9.30</td>\n      <td>2594.800000</td>\n      <td>33.081631</td>\n    </tr>\n    <tr>\n      <th>671</th>\n      <td>D10</td>\n      <td>2016-05-04</td>\n      <td>2631.8</td>\n      <td>2640.55</td>\n      <td>8.75</td>\n      <td>2601.371429</td>\n      <td>35.145563</td>\n    </tr>\n    <tr>\n      <th>672</th>\n      <td>D10</td>\n      <td>2016-05-05</td>\n      <td>2622.5</td>\n      <td>2627.15</td>\n      <td>4.65</td>\n      <td>2607.457143</td>\n      <td>34.584508</td>\n    </tr>\n    <tr>\n      <th>673</th>\n      <td>D10</td>\n      <td>2016-05-06</td>\n      <td>2620.1</td>\n      <td>2621.30</td>\n      <td>1.20</td>\n      <td>2618.328571</td>\n      <td>22.923270</td>\n    </tr>\n  </tbody>\n</table>\n<p>674 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Augment Rolling with Grouped Time Series\n\n`agument_rolling` can be used on grouped time series data:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n## augment rolling on grouped time series: window of 2 & 7 days, window_func of mean and standard deviation\nm4_daily_df \\\n\t.groupby('id') \\\n    .augment_rolling(\n                date_column = 'date',\n                value_column = 'value',\n                window = [2,7],\n                window_func = ['mean', ('std', lambda x: x.std())]\n            )\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_rolling_mean_win_2</th>\n      <th>value_rolling_std_win_2</th>\n      <th>value_rolling_mean_win_7</th>\n      <th>value_rolling_std_win_7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>2074.80</td>\n      <td>1.40</td>\n      <td>2074.800000</td>\n      <td>1.400000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>2061.05</td>\n      <td>12.35</td>\n      <td>2066.100000</td>\n      <td>12.356645</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>2048.80</td>\n      <td>0.10</td>\n      <td>2061.800000</td>\n      <td>13.037830</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>2027.65</td>\n      <td>21.25</td>\n      <td>2050.720000</td>\n      <td>25.041038</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n      <td>9425.35</td>\n      <td>6.55</td>\n      <td>9382.071429</td>\n      <td>74.335988</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n      <td>9392.25</td>\n      <td>26.55</td>\n      <td>9396.400000</td>\n      <td>58.431303</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n      <td>9405.80</td>\n      <td>40.10</td>\n      <td>9419.114286</td>\n      <td>39.184451</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n      <td>9471.90</td>\n      <td>26.00</td>\n      <td>9438.928571</td>\n      <td>38.945336</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n      <td>9521.60</td>\n      <td>23.70</td>\n      <td>9449.028571</td>\n      <td>53.379416</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Augment Time Series Signature\n\n`augment_timeseries_signature()` is designed to assist in generating additional features\nfrom a given date column.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `augment_timeseries_signature()`\n\nUse `help(tk.augment_timeseries_signature)` to review additional helpful documentation.\n\n:::\n\n## Basic Example\n\nWe'll showcase an example using the `m4_daily_df` dataset by generating 29 additional features from the `date` column:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# augment time series signature\nm4_daily_df \\\n    .query('id == \"D10\"') \\\n\t.augment_timeseries_signature(\n\t\tdate_column = 'date'\n\t) \\\n    .head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>date_index_num</th>\n      <th>date_year</th>\n      <th>date_year_iso</th>\n      <th>date_yearstart</th>\n      <th>date_yearend</th>\n      <th>date_leapyear</th>\n      <th>date_half</th>\n      <th>...</th>\n      <th>date_mday</th>\n      <th>date_qday</th>\n      <th>date_yday</th>\n      <th>date_weekend</th>\n      <th>date_hour</th>\n      <th>date_minute</th>\n      <th>date_second</th>\n      <th>date_msecond</th>\n      <th>date_nsecond</th>\n      <th>date_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>1404345600</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3</td>\n      <td>3</td>\n      <td>184</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>1404432000</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>185</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>1404518400</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>186</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>1404604800</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>6</td>\n      <td>6</td>\n      <td>187</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>1404691200</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>7</td>\n      <td>7</td>\n      <td>188</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Augment Holiday Signature\n\n`augment_holiday_signature()` is used to flag holidays from a date column based on date and country.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `augment_holiday_signature()`\n\nUse `help(tk.augment_holiday_signature)` to review additional helpful documentation.\n\n:::\n\n## Basic Example\n\nWe'll showcase an example using some sample data:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# create sample data\ndates = pd.date_range(start = '2022-12-25', end = '2023-01-05')\n\ndf = pd.DataFrame({'date': dates})\n\n# augment time series signature: USA\ndf \\\n    .augment_holiday_signature(\n\t\tdate_column  = 'date',\n\t\tcountry_name = 'UnitedStates'\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>is_holiday</th>\n      <th>before_holiday</th>\n      <th>after_holiday</th>\n      <th>holiday_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-25</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Christmas Day</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-26</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Christmas Day (Observed)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-12-28</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2022-12-29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2022-12-30</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2022-12-31</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2023-01-01</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>New Year's Day</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2023-01-02</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>New Year's Day (Observed)</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2023-01-03</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2023-01-04</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2023-01-05</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Augment Fourier\n\nComing soon ....\n\n",
    "supporting": [
      "05_augmenting_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}